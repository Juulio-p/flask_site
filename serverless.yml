# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: pokymon
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: firstappp
service: firstapplication

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'dev'}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
      Resource: "arn:aws:s3:::fav-name-storage/*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["tblname2", "Arn" ] }

plugins:
  - serverless-wsgi
  - serverless-finch

package:
  patterns:
    - '!node_modules/**'
    - '!**/__pycache__/**'
    - '**/*.py'
    - '!node_modules/aws-sdk/**'
    - '!node_modules/**/aws-sdk/**'

functions:
  api:
    handler: wsgi_handler.handler
    events:
      - httpApi: "*"
    
custom:
  wsgi:
    app: app.app
  client:
    bucketName: juulio99bucket
    errorDocument: index.html
    distributionFolder: client/dist  

 
    
resources:
  Resources:
    tblname2:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "tblname2"
    employeeTbl: #second table to hold the employee data
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "employeeTbl"

